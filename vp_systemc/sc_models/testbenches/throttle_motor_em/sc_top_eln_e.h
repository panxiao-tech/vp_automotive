/**
 * This file is automatically generated from [XML2SCA] 
 * https://github.com/panxiao-tech/XML2SCA
 * Contact: Xiao Pan <pan@cs.uni-kl.de | xml2sca@panxiao.tech>
 * 
 * @file    ect_sc/tb/throttle_motor/sc_top.h
 * @author  Xiao Pan (pan@cs.uni-kl.de)
 * @date    00:30:34 Jun  2 2018
 * @section LICENSE License (ADD YOUR LICENSE HERE)
 *  
 * @section DESCRIPTION Description (ADD YOUR DESCRIPTION HERE)
 *          DC Motor for Throttle Control
 * 
 */


#ifndef sc_top_eln_h_
#define sc_top_eln_h_

#include "../../src/sca_dcmotor_em.h"
#include "../../src/config_sim.h"






//! ---------------------------------------------------------------------------
//! @brief stimuli module
//! ---------------------------------------------------------------------------
SCA_TDF_MODULE(sca_tdf_stimuli_eln)
{
public:
    sca_tdf::sca_in<double>   pin_i;
    sca_tdf::sca_out<double>  pout_vs;
    sca_tdf::sca_out<double>  pout_vb;
    
    // constructor
    sca_tdf_stimuli_eln(sc_core::sc_module_name nm){}

private:
    void set_attributes()
    {
        pin_i.set_delay(1);
//        pout_vs.set_delay(1);
//        pout_vb.set_delay(1);
        pout_vb.set_timestep(sc_core::sc_time(gc_t_step, sc_core::SC_SEC ));
    }
    
    void processing()
    {
        double t_now = sc_core::sc_time_stamp().to_seconds();
        double vs = 1.0 * (sin(2*3.14*t_now*10)) + 1.0;
        
        pout_vs.write(vs);
        pout_vb.write(1.0);
    }
};


//! ---------------------------------------------------------------------------
//! @brief testbench toplevel module for ELN DC motor
//! ---------------------------------------------------------------------------
SC_MODULE(sc_top_eln)
{
    sca_tdf_stimuli_eln      *i_stimuli;
    sca_eln_dcmotor_e      *i_dcmotor_eln;

    sca_tdf::sca_signal<double>  sig_vs;
    sca_tdf::sca_signal<double>  sig_vb;
    sca_tdf::sca_signal<double>  sig_i;


    // sample period
    sca_core::sca_time tstep;

    // trace file
    sca_util::sca_trace_file* tf;
    std::string trace_format; 


    // Constructor
    sc_top_eln(sc_core::sc_module_name nm):sc_module(nm)
    {

        // top level instances
        i_stimuli      = new sca_tdf_stimuli_eln("i_stimuli");
        i_stimuli->pout_vb(sig_vb);
        i_stimuli->pout_vs(sig_vs);
        i_stimuli->pin_i(sig_i);

        i_dcmotor_eln  = new sca_eln_dcmotor_e("i_dcmotor_eln");  
        i_dcmotor_eln->pin_vs(sig_vs);
        i_dcmotor_eln->pin_vb(sig_vb);
        i_dcmotor_eln->pout_i(sig_i);
        
        // trace file
        trace_format = "csv";
        tf = trace_format.compare("vcd") == 0 ?
        sca_util::sca_create_vcd_trace_file("tracefile_dcmotor_tb"):
        sca_util::sca_create_tabular_trace_file("tracefile_dcmotor_tb");
        
        sca_util::sca_trace(tf, sig_vs, "sig_vs");
        sca_util::sca_trace(tf, sig_i, "sig_i");
        sca_util::sca_trace(tf, sig_vb, "sig_vb");

    };


    // Destructor
    ~sc_top_eln()
    {
        if(trace_format.compare("vcd")) 
             sca_close_tabular_trace_file(tf);
         else
             sca_close_vcd_trace_file(tf);
    }
};

#endif 
